
R version 4.2.1 (2022-06-23 ucrt) -- "Funny-Looking Kid"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "MPkn"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('MPkn')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("MPKlMatrix")
> ### * MPKlMatrix
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MPKlMatrix
> ### Title: Creates a matrix of specified row of output 'MUPkLo'
> ### Aliases: MPKlMatrix
> ### Keywords: MPKlMatrix
> 
> ### ** Examples
> 
> A <- array(c(0.9, 0.6, 0.8, 0.05, 0.2, 0.05, 0.05, 0.2, 0.15), c(3, 3))
> P <- array(c(0.9, 0.6, 0.8, 0.05, 0.2, 0.05, 0.05, 0.2, 0.15), c(3, 3))
> U <- array(c(0.8, 0.8, 0.7, 0.06, 0.02, 0.2, 0.14, 0.18, 0.1), c(3, 3))
> sta <- c(1, 2, 3)
> k <- c(1, 0, 1, 0)
> n <- c(5, 7, 12, 17)
> Mx <- MUPkLo(A, P, U, n, k, sta)
> M100 = MPKlMatrix(Mx, step = 100, nc = 3, sta = c(1, 2, 3))
> 
> 
> 
> cleanEx()
> nameEx("MPkn-package")
> ### * MPkn-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MPkn-package
> ### Title: Calculations of One Discrete Model in Several Time Steps
> ### Aliases: MPkn-package
> 
> ### ** Examples
> 
> require(MPkn)
> require(markovchain)
Loading required package: markovchain
Warning: package 'markovchain' was built under R version 4.2.2
Package:  markovchain
Version:  0.9.0
Date:     2022-07-01
BugReport: https://github.com/spedygiorgio/markovchain/issues

> options(digits = 14)
> n = 12
> k = 2
> rz = 11
> P = array(0, c(rz, rz))
> for (i in 1:rz){
+   po = runif(rz)
+   P[i, ] = po/sum(po)
+ }
> I = diag(1, rz, rz)
> Myy = MUPkL(P, P, I, n, k, c(1:rz))
> StSy = NULL
> for (i in 1:rz) StSy = c(StSy, Myy$Navg[,,i][n])
> mrkv = new("markovchain", transitionMatrix = P)
> StSx = steadyStates(mrkv)
> print("MPkn");  print(StSy)
[1] "MPkn"
 [1] 0.072534672093193 0.097949530311953 0.071396428234414 0.096271254036618
 [5] 0.079801520030151 0.115733438524002 0.097637771814896 0.088246318517959
 [9] 0.084454484409533 0.113063909967699 0.082910672059589
> print("markovchain"); print(StSx)
[1] "markovchain"
                     1                 2                 3                 4
[1,] 0.072534672093192 0.097949530311952 0.071396428234413 0.096271254036618
                     5              6                 7                 8
[1,] 0.079801520030151 0.115733438524 0.097637771814895 0.088246318517958
                     9              10                11
[1,] 0.084454484409533 0.1130639099677 0.082910672059589
> 
> 
> 
> 
> cleanEx()

detaching 'package:markovchain'

> nameEx("MUPkL")
> ### * MUPkL
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MUPkL
> ### Title: Calculations of one discrete model in several time steps
> ### Aliases: MUPkL
> ### Keywords: MUPkL
> 
> ### ** Examples
> 
> A <- array(c(2, 3, 1, 4, 2, 1, 3, 1, 2), c(3, 3))
> P <- array(c(0.9, 0.6, 0.8, 0.05, 0.2, 0.05, 0.05, 0.2, 0.15),
+ 					 c(3, 3))
> U <- array(c(0.8, 0.8, 0.7, 0.06, 0.02, 0.2, 0.14, 0.18, 0.1),
+ 					 c(3, 3))
> sta <- c(1, 3)
> k <- 3
> n <- 8
> M33 <- MUPkL(A, P, U, n, k, sta)
> print(M33$N)
, , 1

                  1                2                3
1    2.000000000000   3.000000000000   1.000000000000
2    3.925000000000   4.940000000000   2.943000000000
3    5.853495000000   6.868720000000   4.871633000000
6   11.639083009641  12.654311436025  10.657223645060
12  23.210260229693  24.225488656089  22.228400865120
24  46.352614669800  47.367843096196  45.370755305228
48  92.637323550016  93.652551976412  91.655464185444
96 185.206741310448 186.221969736843 184.224881945875

, , 3

                  1                2                3
1    3.000000000000   1.000000000000   2.000000000000
2    5.730000000000   3.700000000000   4.706000000000
3    8.454690000000   6.424240000000   7.430366000000
6   16.628533874371  14.598077021602  15.604204794767
12  32.976219274905  30.945762422113  31.951890195284
24  65.671590075965  63.641133223173  64.647260996344
48 131.062331678085 129.031874825293 130.038002598464
96 261.843814882325 259.813358029533 260.819485802705

> k <- 1
> n <- 24
> M11 <- MUPkL(A, P, U, n, k, sta)
> print(M11$N)
, , 1

                 1               2               3
1   2.000000000000  3.000000000000  1.000000000000
2   3.925000000000  4.940000000000  2.943000000000
3   5.853495000000  6.868720000000  4.871633000000
4   7.782023945000  8.797252320000  6.800164543000
5   9.710553473095 10.725781898720  8.728694107953
6  11.639083009641 12.654311436025 10.657223645060
7  13.567612546314 14.582840972710 12.585753181742
8  15.496142082990 16.511370509386 14.514282718418
9  17.424671619666 18.439900046062 16.442812255094
10 19.353201156341 20.368429582737 18.371341791769
11 21.281730693017 22.296959119413 20.299871328445
12 23.210260229693 24.225488656089 22.228400865120
13 25.138789766368 26.154018192764 24.156930401796
14 27.067319303044 28.082547729440 26.085459938472
15 28.995848839720 30.011077266115 28.013989475147
16 30.924378376395 31.939606802791 29.942519011823
17 32.852907913071 33.868136339467 31.871048548499
18 34.781437449746 35.796665876142 33.799578085174
19 36.709966986422 37.725195412818 35.728107621850
20 38.638496523098 39.653724949494 37.656637158526
21 40.567026059773 41.582254486169 39.585166695201
22 42.495555596449 43.510784022845 41.513696231877
23 44.424085133125 45.439313559521 43.442225768552
24 46.352614669800 47.367843096196 45.370755305228

, , 3

                 1               2               3
1   3.000000000000  1.000000000000  2.000000000000
2   5.730000000000  3.700000000000  4.706000000000
3   8.454690000000  6.424240000000  7.430366000000
4  11.179305390000  9.148848640000 10.154976386000
5  13.903919640690 11.873462789440 12.879590562206
6  16.628533874371 14.598077021602 15.604204794767
7  19.353148107797 17.322691255005 18.328819028176
8  22.077762341218 20.047305488426 21.053433261598
9  24.802376574640 22.771919721848 23.778047495019
10 27.526990808062 25.496533955270 26.502661728441
11 30.251605041483 28.221148188691 29.227275961863
12 32.976219274905 30.945762422113 31.951890195284
13 35.700833508326 33.670376655535 34.676504428706
14 38.425447741748 36.394990888956 37.401118662128
15 41.150061975170 39.119605122378 40.125732895549
16 43.874676208591 41.844219355800 42.850347128971
17 46.599290442013 44.568833589221 45.574961362392
18 49.323904675435 47.293447822643 48.299575595814
19 52.048518908856 50.018062056064 51.024189829236
20 54.773133142278 52.742676289486 53.748804062657
21 57.497747375700 55.467290522908 56.473418296079
22 60.222361609121 58.191904756329 59.198032529501
23 62.946975842543 60.916518989751 61.922646762922
24 65.671590075965 63.641133223173 64.647260996344

> k <- 0
> n <- 6
> M00 <- MUPkL(A, P, U, n, k, sta)
> print(M00$N)
, , 1

                 1               2               3
1   2.000000000000  3.000000000000  1.000000000000
2   3.925000000000  4.940000000000  2.943000000000
4   7.782023945000  8.797252320000  6.800164543000
8  15.496142082990 16.511370509386 14.514282718418
16 30.924378376395 31.939606802791 29.942519011823
32 61.780850963205 62.796079389601 60.798991598633

, , 3

                 1               2               3
1   3.000000000000  1.000000000000  2.000000000000
2   5.730000000000  3.700000000000  4.706000000000
4  11.179305390000  9.148848640000 10.154976386000
8  22.077762341218 20.047305488426 21.053433261598
16 43.874676208591 41.844219355800 42.850347128971
32 87.468503943338 85.438047090546 86.444174863717

> 
> 
> 
> cleanEx()
> nameEx("MUPkLo")
> ### * MUPkLo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MUPkLo
> ### Title: Calculations of one discrete model in several time steps
> ### Aliases: MUPkLo
> ### Keywords: MUPkLo
> 
> ### ** Examples
> 
> A = array(c(-2, -3, 1, 4, -2, 1, 3, -1, -2), c(3, 3))
> P <- array(c(0.9, 0.6, 0.8, 0.05, 0.2, 0.05, 0.05, 0.2, 0.15), c(3, 3))
> U <- array(c(0.8, 0.8, 0.7, 0.06, 0.02, 0.2, 0.14, 0.18, 0.1), c(3, 3))
> sta <- 3
> Ao <- A
> k <- c(1, 0, 1, 0)
> n <- c(5, 7, 12, 17)
> # Steps, in which will compute the value of the Mx:
> # 1, 2, 3, 4, 5, 10, 20, 21,  22, 23, 24, 25, 50, 100, 200, 400, 800
> Mx <- MUPkLo(A, P, U, n, k, sta)
> print(Mx)
, , 3

                    1                 2                    3
1      3.000000000000   -1.000000000000 -2.0000000000000e+00
2      5.040000000000    0.980000000000  4.0000000000004e-03
3      7.071060000000    3.010160000000  2.0343640000000e+00
4      9.101964060000    5.041050560000  4.0652582440000e+00
5     11.132865868260    7.071952165760  6.0961599025240e+00
10    21.287374736867   17.226461031283  1.6250668768861e+01
20    41.596392473029   37.535478767445  3.6559686505023e+01
21    43.627294246645   39.566380541062  3.8590588278639e+01
22    45.658196020262   41.597282314678  4.0621490052255e+01
23    47.689097793878   43.628184088294  4.2652391825872e+01
24    49.719999567494   45.659085861910  4.4683293599488e+01
25    51.750901341110   47.689987635526  4.6714195373104e+01
50   102.523445681515   98.462531975932  9.7486739713509e+01
100  204.068534362326  200.007620656743  1.9903182839432e+02
200  407.158711723951  403.097798018367  4.0212200575595e+02
400  813.339066447212  809.278152741628  8.0830236047921e+02
800 1625.699775893777 1621.638862188193  1.6206630699258e+03

> A <- Ao
> Mb <- MUPkLo(A, P, U, n = 100, k = 1, sta)
> Mb[100,,]
              1               2               3 
204.06853436233 200.00762065674 199.03182839432 
> 
> 
> 
> cleanEx()
> nameEx("matrix.powerni")
> ### * matrix.powerni
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: matrix.powerni
> ### Title: Matrix Power of Non Integer
> ### Aliases: matrix.powerni
> ### Keywords: matrix.powerni
> 
> ### ** Examples
> 
> require(MPkn)
> require(matrixcalc)
Loading required package: matrixcalc
> matmult <- function(A, B){
+ 	C = matrix(numeric(4), 2, 2)
+ 	for (i in 1:2){
+ 		for (j in 1:2){ C[i, j] = sum(A[i, ]*B[, j])}
+ 	}
+ 	return(C)
+ }
> I = diag(1, 2, 2)
> P = matrix(c(0.9, 0.3, 0.1, 0.7), 2, 2)
> M1 = P
> M2 = matmult((I + P), M1)
> M4 = matmult((I + t(matrix.power(P, 2))), M2)
> M8 = matmult((I + t(matrix.power(P, 4))), M4)
> M16 = matmult((I + t(matrix.power(P, 8))), M8)
> ## =====================
> Q = list()
> Q[[1]] = M1
> Q[[2]] = matmult(M2, matrix.inverse(M1)) - I
> Q[[3]] = matrix.powerni(matmult(M4, matrix.inverse(M2)) - I, 1/2)
> Q[[4]] = matrix.powerni(matmult(M8, matrix.inverse(M4)) - I, 1/4)
> Q[[5]] = matrix.powerni(matmult(M16, matrix.inverse(M8)) - I, 1/8)
> print("Q"); print(Q)
[1] "Q"
[[1]]
     [,1] [,2]
[1,]  0.9  0.1
[2,]  0.3  0.7

[[2]]
     [,1] [,2]
[1,]  0.9  0.1
[2,]  0.3  0.7

[[3]]
     [,1] [,2]
[1,]  0.9  0.1
[2,]  0.3  0.7

[[4]]
     [,1] [,2]
[1,]  0.9  0.1
[2,]  0.3  0.7

[[5]]
     [,1] [,2]
[1,]  0.9  0.1
[2,]  0.3  0.7

> S = as.matrix(Q[[1]], 2, 2)
> for (i in 2:5){
+   S = S + as.matrix(Q[[i]], 2, 2)
+ }
> Qs = S/5
> print("Qs"); print(Qs)
[1] "Qs"
     [,1] [,2]
[1,]  0.9  0.1
[2,]  0.3  0.7
> 
> 
> 
> cleanEx()

detaching 'package:matrixcalc'

> nameEx("radekW")
> ### * radekW
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: radekW
> ### Title: The Numbers of Rows of the Output Matrix
> ### Aliases: radekW
> ### Keywords: radekW
> 
> ### ** Examples
> 
>   radekW(n = c(3, 5, 8, 9, 11), k = c(1, 0, 1, 0, 0))
      [,1]
 [1,]    1
 [2,]    2
 [3,]    3
 [4,]    6
 [5,]   12
 [6,]   13
 [7,]   14
 [8,]   15
 [9,]   30
[10,]   60
[11,]  120
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.64 0.32 2.84 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
